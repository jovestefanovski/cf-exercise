---
AWSTemplateFormatVersion: 2010-09-09
Description: In this stack we define all EC2 resources.

Parameters:
  Prefix:
    Description: Environment where the stack will be deployed
    Type: String
    Default: ticketing

  Environment:
    Description: Environment where the stack will be deployed
    Type: String
    Default: development

  Image:
    Description: Environment where the stack will be deployed
    Type: AWS::EC2::Image::Id
    Default: ami-03bac951c13aac11f

Resources:
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref InstanceRole]

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Prefix}-${Environment}-osticket-ssm
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
              - ssm:*
              - logs:*
              - ec2messages:*
              - ssmmessages:CreateControlChannel
              - ssmmessages:CreateDataChannel
              - ssmmessages:OpenControlChannel
              - ssmmessages:OpenDataChannel
              - ec2:DescribeInstanceStatus
              Resource: '*'

  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${Prefix}-${Environment}-launch-template
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref Image
        InstanceType: t2.micro
        KeyName: !Sub ${Prefix}-${Environment}
        SecurityGroupIds: 
          Fn::Split:
          - ','
          - Fn::ImportValue: loadbalancer-sg
        TagSpecifications:
          - ResourceType: instance
            Tags: 
              - Key: Name
                Value: !Sub ${Prefix}-${Environment}-instance

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Name: !Sub ${Prefix}-${Environment}-AppLB
      Scheme: internet-facing
      SecurityGroups: 
        Fn::Split: 
        - ','
        - Fn::ImportValue: loadbalancer-sg
      Subnets:
        Fn::Split: 
        - ','
        - Fn::ImportValue: pub-subnets
      Tags: 
        - Key: Name
          Value: !Sub ${Prefix}-${Environment}-loadbalancer
      Type: application

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ApplicationTargetGroup
                Weight: 1
  
  ApplicationTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthCheckPath: /
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-299
      Name: !Sub ${Prefix}-${Environment}-AppTGroup
      VpcId: 
        Fn::ImportValue: infrastructure-VPC
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30

  InstanceASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MaxSize: 4
      MinSize: 1
      DesiredCapacity: 1
      VPCZoneIdentifier:
        Fn::Split:
          - ','
          - Fn::ImportValue: priv-subnets
      TargetGroupARNs: [!Ref ApplicationTargetGroup]

  ASGScalingPolicyHigh:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref InstanceASG
      PolicyType: StepScaling
      AdjustmentType: ChangeInCapacity
      StepAdjustments: 
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 1

  ASGScalingPolicyLow:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref InstanceASG
      Cooldown: 60
      ScalingAdjustment: -1

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 2
      Statistic: Average
      Threshold: 80
      AlarmDescription: 'Scale out if CPU > 80% for 2 minutes'
      Period: 60
      AlarmActions:
      - !Ref ASGScalingPolicyHigh
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref InstanceASG
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 60% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      AlarmActions:
        - !Ref ASGScalingPolicyLow
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref InstanceASG
      ComparisonOperator: LessThanThreshold

Outputs:
  ELBName:
    Value: !GetAtt LoadBalancer.DNSName